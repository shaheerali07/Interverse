{"ast":null,"code":"var _jsxFileName = \"/home/hp/Learn/Interverse/Front-end/src/components/chat/chat.js\";\nimport './chat.scss';\nimport React, { useState, useEffect, useRef, useContext } from 'react';\nimport UserContext from '../../userContext/UserContext';\n\nfunction Chat(_ref) {\n  let {\n    username,\n    room,\n    socket\n  } = _ref;\n  const [text, setText] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [state, userDispatch] = useContext(UserContext);\n  useEffect(() => {\n    console.log(state);\n    let userId = state.invitedUser._id;\n    let senderId = state.user._id;\n    socket.emit('notification', {\n      userId,\n      senderId\n    }); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // useEffect(() => {\n  //   socket.on('message', data => {\n  //     let temp = messages;\n  //     temp.push({\n  //       userId: data.userId,\n  //       username: data.username,\n  //       text: data.text\n  //     });\n  //     setMessages([...temp]);\n  //   });\n  //   // eslint-disable-next-line react-hooks/exhaustive-deps\n  // }, [socket]);\n\n  const sendData = () => {\n    if (text !== '') {\n      //encrypt the message here\n      // socket.emit('chat', text);\n      setText('');\n    }\n  };\n\n  const messagesEndRef = useRef(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n\n  useEffect(scrollToBottom, [messages]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"user-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, username, \" \", /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      fontSize: '0.7rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 22\n    }\n  }, \"in \", room))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, messages.map(i => {\n    if (i.username === username) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"message\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 17\n        }\n      }, i.text), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 17\n        }\n      }, i.username));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"message mess-right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 17\n        }\n      }, i.text, \" \"), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 17\n        }\n      }, i.username));\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    ref: messagesEndRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"send\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    placeholder: \"enter your message\",\n    value: text,\n    onChange: e => setText(e.target.value),\n    onKeyPress: e => {\n      if (e.key === 'Enter') {\n        sendData();\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: sendData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, \"Send\")));\n}\n\nexport default Chat;","map":{"version":3,"sources":["/home/hp/Learn/Interverse/Front-end/src/components/chat/chat.js"],"names":["React","useState","useEffect","useRef","useContext","UserContext","Chat","username","room","socket","text","setText","messages","setMessages","state","userDispatch","console","log","userId","invitedUser","_id","senderId","user","emit","sendData","messagesEndRef","scrollToBottom","current","scrollIntoView","behavior","fontSize","map","i","e","target","value","key"],"mappings":"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","sourcesContent":["import './chat.scss';\nimport React, { useState, useEffect, useRef, useContext } from 'react';\nimport UserContext from '../../userContext/UserContext';\n\nfunction Chat({ username, room, socket }) {\n  const [text, setText] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [state, userDispatch] = useContext(UserContext);\n\n  useEffect(() => {\n    console.log(state);\n    let userId = state.invitedUser._id;\n    let senderId = state.user._id;\n    socket.emit('notification', { userId, senderId });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  // useEffect(() => {\n  //   socket.on('message', data => {\n  //     let temp = messages;\n  //     temp.push({\n  //       userId: data.userId,\n  //       username: data.username,\n  //       text: data.text\n  //     });\n  //     setMessages([...temp]);\n  //   });\n  //   // eslint-disable-next-line react-hooks/exhaustive-deps\n  // }, [socket]);\n\n  const sendData = () => {\n    if (text !== '') {\n      //encrypt the message here\n      // socket.emit('chat', text);\n      setText('');\n    }\n  };\n\n  const messagesEndRef = useRef(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(scrollToBottom, [messages]);\n\n  return (\n    <div className='chat'>\n      <div className='user-name'>\n        <h2>\n          {username} <span style={{ fontSize: '0.7rem' }}>in {room}</span>\n        </h2>\n      </div>\n      <div className='chat-message'>\n        {messages.map(i => {\n          if (i.username === username) {\n            return (\n              <div className='message'>\n                <p>{i.text}</p>\n                <span>{i.username}</span>\n              </div>\n            );\n          } else {\n            return (\n              <div className='message mess-right'>\n                <p>{i.text} </p>\n                <span>{i.username}</span>\n              </div>\n            );\n          }\n        })}\n        <div ref={messagesEndRef} />\n      </div>\n      <div className='send'>\n        <input\n          placeholder='enter your message'\n          value={text}\n          onChange={e => setText(e.target.value)}\n          onKeyPress={e => {\n            if (e.key === 'Enter') {\n              sendData();\n            }\n          }}\n        ></input>\n        <button onClick={sendData}>Send</button>\n      </div>\n    </div>\n  );\n}\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}